{"version":3,"sources":["node_modules/regenerator-runtime/runtime.js","index.js"],"names":["matrix","start1","end1","cleanEl","el","innerHTML","buildMap","field","start","finish","mapEl","document","querySelector","rowsEls","map","row","rowIndex","rowEl","createElement","classList","add","cellEls","cell","cellIndex","cellEl","dataset","coord","String","append","TOP","BOTTOM","RIGHT","LEFT","path","run","end","console","log","push","startCell","visited","finishCell","go","res","sleep","ms","Promise","resolve","setTimeout","previousPoint","currentPoint","finishPoint","isEqual","neighbors","neighbor","nextPoint","getNeighborPoint","nextValue","getValueAtPoint","nextCell","warn","badPoint","pop","badCell","remove","length","relation","x","y","maybeValue","p1","p2","addEventListener"],"mappings":"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":"maze.e31bb0bc.js","sourceRoot":"..","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","import 'regenerator-runtime/runtime';\n\nconst matrix = [\n  [1, 0, 0, 0, 0, 0, 1, 1, 1, 0],\n  [1, 0, 1, 1, 0, 0, 1, 0, 0, 0],\n  [1, 1, 1, 0, 0, 0, 1, 1, 0, 0],\n  [0, 0, 1, 1, 0, 0, 0, 1, 0, 0],\n  [0, 0, 0, 1, 1, 1, 1, 1, 0, 0],\n  [0, 0, 0, 0, 0, 1, 0, 0, 0, 0],\n  [1, 0, 1, 1, 1, 1, 0, 0, 0, 0],\n  [1, 1, 1, 0, 0, 0, 0, 1, 1, 1],\n  [0, 1, 0, 1, 0, 0, 1, 1, 0, 1],\n  [0, 1, 1, 1, 1, 1, 1, 0, 0, 1],\n];\n\nconst start1 = [0, 0];\nconst end1 = [9, 9];\n\nfunction cleanEl(el) {\n  el.innerHTML = '';\n}\n\nfunction buildMap(field, start, finish) {\n  const mapEl = document.querySelector('.maze');\n  cleanEl(mapEl);\n\n  const rowsEls = field.map((row, rowIndex) => {\n    const rowEl = document.createElement('div');\n    rowEl.classList.add('row');\n\n    const cellEls = row.map((cell, cellIndex) => {\n      const cellEl = document.createElement('div');\n      cellEl.classList.add('cell');\n      cellEl.dataset.coord = String([cellIndex, rowIndex]);\n\n      if (cell === 0) {\n        cellEl.classList.add('disabled');\n      }\n\n      return cellEl;\n    });\n\n    rowEl.append(...cellEls);\n\n    return rowEl;\n  });\n\n  mapEl.append(...rowsEls);\n}\n\nconst TOP = [0, -1];\nconst BOTTOM = [0, 1];\nconst RIGHT = [1, 0];\nconst LEFT = [-1, 0];\n\nconst path = [];\n\nasync function run(field, start, end) {\n  console.log('start');\n\n  path.push(start);\n  const startCell = document.querySelector(`[data-coord=\"${String(start)}\"]`);\n  startCell.classList.add('green');\n  startCell.dataset.visited = true;\n  startCell.innerHTML = 'S';\n\n  const finishCell = document.querySelector(`[data-coord=\"${String(end)}\"]`);\n  finishCell.innerHTML = 'F';\n\n  const res = await go(field, null, start, end);\n\n  console.log('result:', res);\n  document.querySelector('.result').innerHTML = res;\n  console.log(path);\n}\n\nfunction sleep(ms) {\n  return new Promise(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n\nasync function go(field, previousPoint, currentPoint, finishPoint) {\n  console.log('go', currentPoint);\n  if (isEqual(currentPoint, finishPoint)) {\n    return 'Found Pass';\n  }\n\n  const neighbors = [TOP, RIGHT, BOTTOM, LEFT];\n\n  for (let neighbor of neighbors) {\n    const nextPoint = getNeighborPoint(currentPoint, neighbor);\n    if (isEqual(previousPoint, nextPoint)) {\n      continue;\n    }\n\n    const nextValue = getValueAtPoint(field, nextPoint);\n    const nextCell = document.querySelector(\n      `[data-coord=\"${String(nextPoint)}\"]`,\n    );\n\n    if (nextValue === 1 && !nextCell.dataset.visited) {\n      // can pass .. and not visited?\n\n      path.push(nextPoint);\n\n      nextCell.classList.add('green');\n      nextCell.dataset.visited = true;\n      await sleep(300);\n      let res = await go(field, currentPoint, nextPoint, finishPoint);\n\n      if (res === 'Not Found') {\n        // one step back\n        console.warn('No further passes');\n        const badPoint = path.pop();\n\n        const badCell = document.querySelector(\n          `[data-coord=\"${String(badPoint)}\"]`,\n        );\n\n        badCell.classList.remove('green');\n\n        await sleep(300);\n        res = await go(field, currentPoint, path[path.length - 1], finishPoint);\n      }\n\n      if (res === 'Found Pass') {\n        return res;\n      }\n    }\n  }\n\n  return 'Not Found';\n}\n\nfunction getNeighborPoint(currentPoint, relation) {\n  return [currentPoint[0] + relation[0], currentPoint[1] + relation[1]];\n}\n\nfunction getValueAtPoint(field, [x, y]) {\n  const maybeValue = field[y] ? field[y][x] : null;\n\n  return maybeValue || 0;\n}\n\nfunction isEqual(p1, p2) {\n  if (!p1 || !p2) {\n    return false;\n  }\n\n  return p1[0] === p2[0] && p1[1] === p2[1];\n}\n\nbuildMap(matrix, start1, end1);\n\ndocument\n  .querySelector('#run-btn')\n  .addEventListener('click', () => run(matrix, start1, end1));\n\ndocument\n  .querySelector('#clear-btn')\n  .addEventListener('click', () => buildMap(matrix, start1, end1));\n"]}